August 9th 2012 : 

Implementation of traffic shaping for our very own simulator box. Right now the code is all set up but sending packets does't seem to work.
The program claims they have been sent, but tcpdump does not see them. This is because for a non-tap device to be activated it needs to be connected to a cable so that the indicator led turns on. 


Even simply pinging on eth1 doesn't seem to be logged at tcpdump. Maybe it takes a while.  Yes, it does take a while. 
Why is there so much buffering in tcpdump's IO to screen ? Use -l and -U to prevetn buffering as much as possible.
Now, basically eth0 gets all the arp packets but eth1 doesn't.
So eth1 doesn't transmit any packets unless there is a link at the other end. Smart of it :)

Anyway, so that's one thing taken care of.   

So, when I loop back my own eth1 into eth2 things seem to work. The trick is making the green lights glow on the Eth adaptor. send works ok, there is no need to use sendto
Ok, on first glance things seem to work ok. There is nothing random being added by the NIC, and raw packets work exactly as they should. The .dump files indicate that. 

Also observed this effect documented here : http://www.winpcap.org/pipermail/winpcap-users/2007-October/002142.html

Anyway, now I ll try and get actual pcap files to validate this whole thing.

Got the pcap files

eth0.pcap : eth0 is the interface that is pinging Google.com. This is going to be the callee behind the simulator box ie the input interface of the simulator box. 
eth1.pcap : eth1 is the output interface on the simulator box.
eth2.pcap : Is the outside world. 

So eth2.pcap should look exactly like eth0.pcap for transparent forwarding. 

I checked this: It looks like the pcap files match exactly. So we are probably in good hands. 

Next steps :

1. Check on the checksum recalculation that Keith talked about. 
2. What is avahi ?
3. A raw socket both receives packets that the host generated on that interface and that someone else generated on that interface. Seems to be a little confusing that way since it seems to repeat both ICMP requests and replies with all the source address and everything. 
4. Test this out end to end with a callee that can ping an IP address on the same subnet, outside subnet and google through our middle man. Hopefully this stuff works out. 
5. Putting the ethernet card in promiscuous mode. Hope that helps.

Documentation :

dump has the dump files from the eth0->eth1->eth2 experiment. 
pcap has the pcap files from the same experiment.  

August 10th :

1. Connected Shuo's Lenovo thinkpad into my simulator box to forward packets. So far it's looking ok. We ll see if it holds up or a switch along the way gets annoyed about it. I need to write a packet sniffer for the other end as well ie back the other way around. 

2. Lastly, I think the forwarding interface should be in promsicuous mode for the switch to send it random packets which do not match it's ethernet interface.

Here's a packet trace :

    Arrival Time: Aug 10, 2012 10:07:08.266332000
    [Time delta from previous captured frame: 1.000219000 seconds]
    [Time delta from previous displayed frame: 1.000219000 seconds]
    [Time since reference or first frame: 4.000874000 seconds]
    Frame Number: 5
    Frame Length: 60 bytes
    Capture Length: 60 bytes
    [Frame is marked: False]
    [Protocols in frame: eth:arp]
Ethernet II, Src: HonHaiPr_1c:a6:22 (00:22:68:1c:a6:22), Dst: ff:22:ff:1c:00:22 (ff:22:ff:1c:00:22)
    Destination: ff:22:ff:1c:00:22 (ff:22:ff:1c:00:22)
        Address: ff:22:ff:1c:00:22 (ff:22:ff:1c:00:22)
        .... ...1 .... .... .... .... = IG bit: Group address (multicast/broadcast)
        .... ..1. .... .... .... .... = LG bit: Locally administered address (this is NOT the factory default)
    Source: HonHaiPr_1c:a6:22 (00:22:68:1c:a6:22)
        Address: HonHaiPr_1c:a6:22 (00:22:68:1c:a6:22)
        .... ...0 .... .... .... .... = IG bit: Individual address (unicast)
        .... ..0. .... .... .... .... = LG bit: Globally unique address (factory default)
    Type: ARP (0x0806)
    Trailer: 000000000000000000000000000000000000
Address Resolution Protocol (request)
    Hardware type: Ethernet (0x0001)
    Protocol type: IP (0x0800)
    Hardware size: 6
    Protocol size: 4
    Opcode: request (0x0001)
    [Is gratuitous: False]
    Sender MAC address: HonHaiPr_1c:a6:22 (00:22:68:1c:a6:22)
    Sender IP address: 128.30.87.180 (128.30.87.180)
    Target MAC address: ff:22:ff:1c:00:22 (ff:22:ff:1c:00:22)
    Target IP address: 128.30.87.123 (128.30.87.123)


 
Frame 2 (60 bytes on wire, 60 bytes captured)
    Arrival Time: Aug 10, 2012 10:07:08.266397000
    [Time delta from previous captured frame: 1.000233000 seconds]
    [Time delta from previous displayed frame: 1.000233000 seconds]
    [Time since reference or first frame: 1.000233000 seconds]
    Frame Number: 2
    Frame Length: 60 bytes
    Capture Length: 60 bytes
    [Frame is marked: False]
    [Protocols in frame: eth:arp]
Ethernet II, Src: HonHaiPr_1c:a6:22 (00:22:68:1c:a6:22), Dst: ff:22:ff:1c:00:22 (ff:22:ff:1c:00:22)
    Destination: ff:22:ff:1c:00:22 (ff:22:ff:1c:00:22)
        Address: ff:22:ff:1c:00:22 (ff:22:ff:1c:00:22)
        .... ...1 .... .... .... .... = IG bit: Group address (multicast/broadcast)
        .... ..1. .... .... .... .... = LG bit: Locally administered address (this is NOT the factory default)
    Source: HonHaiPr_1c:a6:22 (00:22:68:1c:a6:22)
        Address: HonHaiPr_1c:a6:22 (00:22:68:1c:a6:22)
        .... ...0 .... .... .... .... = IG bit: Individual address (unicast)
        .... ..0. .... .... .... .... = LG bit: Globally unique address (factory default)
    Type: ARP (0x0806)
    Trailer: 000000000000000000000000000000000000
Address Resolution Protocol (request)
    Hardware type: Ethernet (0x0001)
    Protocol type: IP (0x0800)
    Hardware size: 6
    Protocol size: 4
    Opcode: request (0x0001)
    [Is gratuitous: False]
    Sender MAC address: HonHaiPr_1c:a6:22 (00:22:68:1c:a6:22)
    Sender IP address: 128.30.87.180 (128.30.87.180)
    Target MAC address: ff:22:ff:1c:00:22 (ff:22:ff:1c:00:22)
    Target IP address: 128.30.87.123 (128.30.87.123)


---

Tried pinging 128.30.87.1 and it seems to work out ok. Of course, there is some sort of a broadcast storm but I guess I can fix that. 

Figured out why this is happening .

The packet-sniffer is configured to do ETH_P_ALL which means it will receive EVERY single packet on the interface. Now, this is independent of whether it was received from outside or generated from inside. They are just packets that show up at a point with no directionaility. 

So eth0 (the ingress) receives a packet and sends it to eth1. eth1 gets this and says, oh I see a packet and it forwards it back to eth0. Similarly the other way around. It soon leads to an amazing flood of packets. 
So, the idea is eth0 forwards any packet with a source MAC address equal to the callee's address into eth1. eth1 forwards a packet into eth0 only if the destination address is either broadcast or the spoofer MAC. From eth0 to eth1 it's the other way around.  

---------

August 18th, 

Tests to speedtest.net seem to return more or less the same result with and without the interceptor . 
I managed to fix the message size too long issues. It was because of Large Segment Offload and it's cousins. 
ping doesn't work till you put both ingress and egress in promiscuous mode. 

